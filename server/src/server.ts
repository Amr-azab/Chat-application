// import mongoose from "mongoose";
// import http from "http";
// import { Server } from "socket.io";
// import dotenv from "dotenv";

// dotenv.config({ path: "./.env" });
// import app from "./app";
// const server = http.createServer(app);
// const io = new Server(server, {
//   cors: {
//     origin: "http://localhost:3000",
//     methods: ["GET", "POST"],
//     credentials: true,
//   },
// });

// // The socket.id is generated by the server when a client establishes a connection.
// io.on("connection", (socket) => {
//   console.log(`Connection ID: ${socket.id}`);

//   socket.on("send_message", (data) => {
//     // Emit the "receive_message" event to all connected clients
//     io.emit("receive_message", data);
//     console.log(data);
//   });

//   socket.on("disconnect", () => {
//     console.log("Disconnected", socket.id);
//   });
// });
// const DB = process.env.DATABASE.replace(
//   "<PASSWORD>",
//   process.env.DATABASE_PASSWORD
// );
// mongoose.connect(DB).then(() => console.log("DB Connection Successful!"));

// const port = process.env.PORT || 8000;
// server.listen(port, () => {
//   console.log(`APP RUNNING ON PORT ${port}...`);
// });
import mongoose from "mongoose";
import * as http from "http";
import app from "./app";
import dotenv from "dotenv";
import * as socketio from "socket.io";

import Room from "./model/Room";
import { IUser } from "./model/User";

const port = 8000;

dotenv.config();

const mongoDB = process.env.DATABASE.replace(
  "<PASSWORD>",
  process.env.DATABASE_PASSWORD
);

const server: http.Server = http.createServer(app);

mongoose
  .connect(mongoDB)
  .then(() => console.log("DB connection successfull !"));

const io: socketio.Server = new socketio.Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
  },
});

let users = new Set();

io.on("connection", (socket) => {
  socket.on("join_room", (data) => {
    socket.join(data);
  });

  socket.on("online", async (data) => {
    users.add(data);
    io.emit("online_users", [...users]);
  });

  socket.on("logout", async (data) => {
    users.delete(data);
    io.emit("offline", [...users]);
  });

  socket.on("send_message", async (data) => {
    socket.to(data.roomId).emit("receive_message", data);

    console.log(data);

    await Room.findByIdAndUpdate(data.roomId, {
      $push: {
        messages: {
          text: data.text,
          from: data.from,
          to: data.to,
          createdAt: data.createdAt,
        },
      },
    });
  });
});

server.listen(port, () => {
  console.log(`App running on port ${port}...`);
});
